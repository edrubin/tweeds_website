agent_office := body %>%
str_extract("Chat Origin: Chat Now [A-Z]{2}") %>% str_sub(-2, -1)
]
chat_dt[, agent_office := first(agent_office), by = live_chat_transcript_id]
# Focus on KE and NG
# NOTE: Restricting to KE and NG
chat_dt <- chat_dt[agent_office %in% c("KE", "NG")]
# Drop first message of the conversation (date and location information)
chat_dt <- chat_dt[message_n != 1]
chat_dt[, message_n := message_n - 1]
# Flag the messages sent by visitors
chat_dt[, from_visitor := str_detect(body, "^Visitor:")]
# All text to lowercase
chat_dt[, `:=`(
created_by_full_name = created_by_full_name %>% str_to_lower(),
owner_full_name = owner_full_name %>% str_to_lower(),
last_modified_by_full_name = last_modified_by_full_name %>% str_to_lower(),
body = body %>% str_to_lower(),
owner_forename = owner_forename %>% str_to_lower(),
owner_surname = owner_surname %>% str_to_lower()
)]
# Join agent's first-name diminutives
chat_dt %<>% merge(
y = first_dt[, .(variants = paste(variant, collapse = "|")), by = first_name],
by.x = "owner_forename",
by.y = "first_name",
all.x = T,
all.y = F
)
# HACK: For now I'm focusing on chats with agents for whom we have diminutives
chat_dt <- chat_dt[!is.na(variants)]
# Split into visitor (v) and agent (a) datasets
v_dt <- chat_dt[from_visitor == T]
a_dt <- chat_dt[from_visitor == F]
# Remove "Visitor: " from the beginning of visitor's messages
v_dt[, body := str_remove_all(body, "^Visitor: ")]
# Figure out the agent's name in the prompt ("yemisi.fadoju: " or "Abby: ")
a_dt[, agent_prompt :=
str_extract(body, "^.*?:\\s") %>% str_remove_all(":\\s$")]
# Remove the agent's prompt from her messages
a_dt[, body := str_remove(body, fixed(paste0(agent_prompt, ": ")))]
dir_project
dir_project %>% paste0("rct_processes/plugin/filters.txt") %>% fread()
dir_project %>% paste0("rct_processes/plugin/filters.txt") %>% read.table()
dir_project %>% paste0("rct_processes/plugin/filters.txt") %>% read.table() %>% class
dir_project %>% paste0("rct_processes/plugin/filters.txt") %>% read.table() %>% as.vector
dir_project %>% paste0("rct_processes/plugin/filters.txt") %>% read.table() %>% as.character()
dir_project %>% paste0("rct_processes/plugin/filters.txt") %>% read.table() %>% as.character()
dir_project %>% paste0("rct_processes/plugin/filters.txt") %>% read.table() %>% class
filter_v <- dir_project %>%
paste0("rct_processes/plugin/filters.txt") %>%
read.table()
filter_v
filter_v[1]
filter_v[1,1]
filter_v[1,1]$V!
filter_v[1,1]$V1
filter_v$V1
filter_v <- dir_project %>%
paste0("rct_processes/plugin/filters.txt") %>%
read.table() %$%
V1
filter_v
rm(filter_v)
filters <- dir_project %>%
paste0("rct_processes/plugin/filters.txt") %>%
read.table() %$%
V1
filters
# Load the 'filters' and collapse
filters <- dir_project %>%
paste0("rct_processes/plugin/filters.txt") %>%
read.table() %$%
V1 %>%
paste(collapse = "|")
filters
# Load the 'filters' and collapse
filters <- dir_project %>%
paste0("rct_processes/plugin/filters.txt") %>%
read.table() %$%
V1 %>%
paste(collapse = "\\s|")
filters
str_detect("hello abi", "hello\\sabi")
str_detect("hello abi", "hello\\sabi|hello\\sabigal")
str_detect("hello abi", "hi\\s|hello\\s(?=abigal|abi)")
str_detect("hello abi", "hi\\s|hallo\\s(?=abigal|abi)")
str_detect("hello abi", "hi\\s|hello\\s(?=abigal|abi)")
str_detect("hello abi", "hi\\s|hello\\s(?=abigal|ab)")
str_detect("hello abi", "hi\\s|hello\\s(?=abigal|abil)")
v_dt %>% head()
# Notes ----------------------------------------------------------------------------------
#   - I opened the .xls and .xlsx files in Excel and then saved as .csv. We can
#     streamline this process later.
#   - I found two messages out of 3008 (two conversations out of 533) in which a visitor
#     uses the agent's first name. The second isn't actually a case, but it could be
#     something we want to think about if the customer sees this message.
#       1. "Hi Christine"
#       2. "Visitor: ... Agent Agoa S successfully transferred the chat ..."
#   - It appears as though the agents' names can get reversed (e.g., "Haraoui Mohamed"
#     and "Agoa Stephanie". We may want to check for first and last, unless we have
#     better names data.
#   - Some chats use languages other than English. We can sort of check this with
#     `chat_dt[, language := textcat::textcat(body)]`.
# Setup ----------------------------------------------------------------------------------
# Options
options(stringsAsFactors = F)
# Packages
library(pacman)
p_load(tidyverse, lubridate, parallel, splitstackshape, readxl, data.table, magrittr)
# Directories
dir_project <- "/Users/edwardarubin/Dropbox/Research/MyProjects/GenderBiases_Kenya/"
dir_data    <- dir_project %>% paste0("data/")
dir_chats   <- dir_data %>% paste0("raw/chats/")
dir_names   <- dir_data %>% paste0("intermediate/names/")
# Load chat data -------------------------------------------------------------------------
# Load chats_2018-9-10_2018-9-16.xls and enforce uniqueness
chat1_dt <- paste0(dir_chats, "chats_2018-9-10_2018-9-16.csv") %>%
fread() %>% unique()
# Load chats_2018-9-10_2018-9-16.xls
chat2_dt <- paste0(dir_chats, "chats_2018-9-17_2018-9-23.csv") %>%
fread() %>% unique()
# Convert variable names to lowercase, substitute spaces for underscores, remove ':'
setnames(
x = chat1_dt,
old = names(chat1_dt),
new = names(chat1_dt) %>%
str_to_lower() %>%
str_replace_all("\\s", "_") %>%
str_remove_all(":")
)
setnames(
x = chat2_dt,
old = names(chat2_dt),
new = names(chat2_dt) %>%
str_to_lower() %>%
str_replace_all("\\s", "_") %>%
str_remove_all(":")
)
# Bind the two datasets
chat_dt <- rbindlist(list(chat1_dt, chat2_dt))
# Drop original datasets
rm(chat1_dt, chat2_dt)
# Clean up
gc()
# Load names data ------------------------------------------------------------------------
# Load the names file
names_dt <- paste0(dir_names, "names_combined.csv") %>% fread()
# Data work: Names data ------------------------------------------------------------------
# NOTE: The names data currently do not have the actual chat agents. I'm going to create
#   a dataset of diminutives linked to first names.
# Find the number of names (parts) for each name
names_dt[, n_names := tstrsplit(name, "\\s") %>% length(), by = name]
# Add a variable for the third name (not first and not last)
names_dt[n_names == 3, `:=`(
third_name = name %>%
str_split("\\s") %>%
unlist() %>%
extract(3)
), by = name]
# Create a dataset of the first names
first_names <- names_dt$first_name %>% unique()
# For each of the first names, find the corresponding diminutives
first_dt <- lapply(
X = first_names,
FUN = function(x) {
# x <- "Sylvia"
# Which rows match?
x_i <- names_dt[first_name == x, which = T]
# Grab the diminutives, removing last_name (as long as last != first)
dim_dt <- names_dt[x_i,][first_name != last_name][,
variants := name_variations %>% str_remove_all(last_name)
]
# Remove third_name for non-empty third names (that are not the same as first)
dim_dt[n_names == 3 & first_name != third_name,
variants := variants %>% str_remove_all(third_name)
]
# Convert the diminutives to vectors (currently single character strings)
dim_v <- lapply(
X = dim_dt[,variants],
FUN = function(i) str_split(i, regex(";+")) %>% unlist()
) %>% unlist()
# Take the union
dim_v %<>% str_to_lower() %>% unique()
# Drop empties
dim_v <- dim_v[dim_v != ""]
# Create data.table of the first name and its diminutives
if(length(dim_v) > 0) {
return(data.table(first_name = str_to_lower(x), variant = dim_v))
}
}
) %>% rbindlist()
# Remove white space in variants and remove elizabeth's variant of 'y'
first_dt[, variant := str_remove(variant, "\\s")]
first_dt <- first_dt[variant != "y"]
# Order by alphabetically
setorder(first_dt, first_name, variant)
# Save in long and wide versions
fwrite(
x = first_dt,
file = paste0(dir_data, "raw/first_name_variants.csv")
)
fwrite(
x = first_dt[, .(variants = paste(variant, collapse = ";")), by = first_name],
file = paste0(dir_data, "raw/first_name_variants_wide.csv")
)
# Data work: Chat data -------------------------------------------------------------------
# Drop chats without messages
chat_dt <- chat_dt[body != ""]
# Find owner first and last name (split on white space, i.e., " ")
chat_dt[, c("owner_forename", "owner_surname") :=
tstrsplit(
x = owner_full_name,
" ",
fixed = T,
fill = NA
)
]
# Split chats into individual messages
# NOTE: Uses the time stamps, e.g., " ( 12m 10s ) "
chat_dt <- cSplit(
indt = chat_dt,
splitCols = "body",
sep = "\\s\\(\\s{0,1}[0-9]{0,2}h{0,1}\\s[0-9]{1,2}m\\s[0-9]{1,2}s\\s\\)\\s",
direction = "long",
fixed = F,
stripWhite = T,
drop = T
)
# Add a counter within the conversation
chat_dt[, message_n := 1:.N, by = live_chat_transcript_id]
# Determine the agent's office country
chat_dt[message_n == 1,
agent_office := body %>%
str_extract("Chat Origin: Chat Now [A-Z]{2}") %>% str_sub(-2, -1)
]
chat_dt[, agent_office := first(agent_office), by = live_chat_transcript_id]
# Focus on KE and NG
# NOTE: Restricting to KE and NG
chat_dt <- chat_dt[agent_office %in% c("KE", "NG")]
# Drop first message of the conversation (date and location information)
chat_dt <- chat_dt[message_n != 1]
chat_dt[, message_n := message_n - 1]
# Flag the messages sent by visitors
chat_dt[, from_visitor := str_detect(body, "^Visitor:")]
# All text to lowercase
chat_dt[, `:=`(
created_by_full_name = created_by_full_name %>% str_to_lower(),
owner_full_name = owner_full_name %>% str_to_lower(),
last_modified_by_full_name = last_modified_by_full_name %>% str_to_lower(),
body = body %>% str_to_lower(),
owner_forename = owner_forename %>% str_to_lower(),
owner_surname = owner_surname %>% str_to_lower()
)]
# Join agent's first-name diminutives
chat_dt %<>% merge(
y = first_dt[, .(variants = paste(variant, collapse = "|")), by = first_name],
by.x = "owner_forename",
by.y = "first_name",
all.x = T,
all.y = F
)
# HACK: For now I'm focusing on chats with agents for whom we have diminutives
chat_dt <- chat_dt[!is.na(variants)]
# Split into visitor (v) and agent (a) datasets
v_dt <- chat_dt[from_visitor == T]
a_dt <- chat_dt[from_visitor == F]
# Remove "Visitor: " from the beginning of visitor's messages
v_dt[, body := str_remove_all(body, "^Visitor: ")]
# Figure out the agent's name in the prompt ("yemisi.fadoju: " or "Abby: ")
a_dt[, agent_prompt :=
str_extract(body, "^.*?:\\s") %>% str_remove_all(":\\s$")]
# Remove the agent's prompt from her messages
a_dt[, body := str_remove(body, fixed(paste0(agent_prompt, ": ")))]
# Load the 'filters' and collapse
filters <- dir_project %>%
paste0("rct_processes/plugin/filters.txt") %>%
read.table() %$%
V1 %>%
paste(collapse = "\\s|")
v_dt %>% head
v_dt[str_detect(body, paste0(filters,"(?=", variants ")"))]
v_dt[str_detect(body, paste0(filters,"(?=", variants, ")"))]
v_dt[str_detect(body, paste0(filters,"(?=", variants, ")")), by = 1:.N]
v_dt[str_detect(body, paste0(filters,"(?=", variants, ")"))]
v_dt[, regex_filter := paste0(filters,"(?=", variants, ")")]
v_dt %>% head
v_dt[str_detect(body, regex_filter)]
# Notes ----------------------------------------------------------------------------------
#   - I opened the .xls and .xlsx files in Excel and then saved as .csv. We can
#     streamline this process later.
#   - I found two messages out of 3008 (two conversations out of 533) in which a visitor
#     uses the agent's first name. The second isn't actually a case, but it could be
#     something we want to think about if the customer sees this message.
#       1. "Hi Christine"
#       2. "Visitor: ... Agent Agoa S successfully transferred the chat ..."
#   - It appears as though the agents' names can get reversed (e.g., "Haraoui Mohamed"
#     and "Agoa Stephanie". We may want to check for first and last, unless we have
#     better names data.
#   - Some chats use languages other than English. We can sort of check this with
#     `chat_dt[, language := textcat::textcat(body)]`.
# Setup ----------------------------------------------------------------------------------
# Options
options(stringsAsFactors = F)
# Packages
library(pacman)
p_load(tidyverse, lubridate, parallel, splitstackshape, readxl, data.table, magrittr)
# Directories
dir_project <- "/Users/edwardarubin/Dropbox/Research/MyProjects/GenderBiases_Kenya/"
dir_data    <- dir_project %>% paste0("data/")
dir_chats   <- dir_data %>% paste0("raw/chats/")
dir_names   <- dir_data %>% paste0("intermediate/names/")
# Load chat data -------------------------------------------------------------------------
# Load chats_2018-9-10_2018-9-16.xls and enforce uniqueness
chat1_dt <- paste0(dir_chats, "chats_2018-9-10_2018-9-16.csv") %>%
fread() %>% unique()
# Load chats_2018-9-10_2018-9-16.xls
chat2_dt <- paste0(dir_chats, "chats_2018-9-17_2018-9-23.csv") %>%
fread() %>% unique()
# Convert variable names to lowercase, substitute spaces for underscores, remove ':'
setnames(
x = chat1_dt,
old = names(chat1_dt),
new = names(chat1_dt) %>%
str_to_lower() %>%
str_replace_all("\\s", "_") %>%
str_remove_all(":")
)
setnames(
x = chat2_dt,
old = names(chat2_dt),
new = names(chat2_dt) %>%
str_to_lower() %>%
str_replace_all("\\s", "_") %>%
str_remove_all(":")
)
# Bind the two datasets
chat_dt <- rbindlist(list(chat1_dt, chat2_dt))
# Drop original datasets
rm(chat1_dt, chat2_dt)
# Clean up
gc()
# Load names data ------------------------------------------------------------------------
# Load the names file
names_dt <- paste0(dir_names, "names_combined.csv") %>% fread()
# Data work: Names data ------------------------------------------------------------------
# NOTE: The names data currently do not have the actual chat agents. I'm going to create
#   a dataset of diminutives linked to first names.
# Find the number of names (parts) for each name
names_dt[, n_names := tstrsplit(name, "\\s") %>% length(), by = name]
# Add a variable for the third name (not first and not last)
names_dt[n_names == 3, `:=`(
third_name = name %>%
str_split("\\s") %>%
unlist() %>%
extract(3)
), by = name]
# Create a dataset of the first names
first_names <- names_dt$first_name %>% unique()
# For each of the first names, find the corresponding diminutives
first_dt <- lapply(
X = first_names,
FUN = function(x) {
# x <- "Sylvia"
# Which rows match?
x_i <- names_dt[first_name == x, which = T]
# Grab the diminutives, removing last_name (as long as last != first)
dim_dt <- names_dt[x_i,][first_name != last_name][,
variants := name_variations %>% str_remove_all(last_name)
]
# Remove third_name for non-empty third names (that are not the same as first)
dim_dt[n_names == 3 & first_name != third_name,
variants := variants %>% str_remove_all(third_name)
]
# Convert the diminutives to vectors (currently single character strings)
dim_v <- lapply(
X = dim_dt[,variants],
FUN = function(i) str_split(i, regex(";+")) %>% unlist()
) %>% unlist()
# Take the union
dim_v %<>% str_to_lower() %>% unique()
# Drop empties
dim_v <- dim_v[dim_v != ""]
# Create data.table of the first name and its diminutives
if(length(dim_v) > 0) {
return(data.table(first_name = str_to_lower(x), variant = dim_v))
}
}
) %>% rbindlist()
# Remove white space in variants and remove elizabeth's variant of 'y'
first_dt[, variant := str_remove(variant, "\\s")]
first_dt <- first_dt[variant != "y"]
# Order by alphabetically
setorder(first_dt, first_name, variant)
# Save in long and wide versions
fwrite(
x = first_dt,
file = paste0(dir_data, "raw/first_name_variants.csv")
)
fwrite(
x = first_dt[, .(variants = paste(variant, collapse = ";")), by = first_name],
file = paste0(dir_data, "raw/first_name_variants_wide.csv")
)
# Data work: Chat data -------------------------------------------------------------------
# Drop chats without messages
chat_dt <- chat_dt[body != ""]
# Find owner first and last name (split on white space, i.e., " ")
chat_dt[, c("owner_forename", "owner_surname") :=
tstrsplit(
x = owner_full_name,
" ",
fixed = T,
fill = NA
)
]
# Split chats into individual messages
# NOTE: Uses the time stamps, e.g., " ( 12m 10s ) "
chat_dt <- cSplit(
indt = chat_dt,
splitCols = "body",
sep = "\\s\\(\\s{0,1}[0-9]{0,2}h{0,1}\\s[0-9]{1,2}m\\s[0-9]{1,2}s\\s\\)\\s",
direction = "long",
fixed = F,
stripWhite = T,
drop = T
)
# Add a counter within the conversation
chat_dt[, message_n := 1:.N, by = live_chat_transcript_id]
# Determine the agent's office country
chat_dt[message_n == 1,
agent_office := body %>%
str_extract("Chat Origin: Chat Now [A-Z]{2}") %>% str_sub(-2, -1)
]
chat_dt[, agent_office := first(agent_office), by = live_chat_transcript_id]
# Focus on KE and NG
# NOTE: Restricting to KE and NG
chat_dt <- chat_dt[agent_office %in% c("KE", "NG")]
# Drop first message of the conversation (date and location information)
chat_dt <- chat_dt[message_n != 1]
chat_dt[, message_n := message_n - 1]
# Flag the messages sent by visitors
chat_dt[, from_visitor := str_detect(body, "^Visitor:")]
# All text to lowercase
chat_dt[, `:=`(
created_by_full_name = created_by_full_name %>% str_to_lower(),
owner_full_name = owner_full_name %>% str_to_lower(),
last_modified_by_full_name = last_modified_by_full_name %>% str_to_lower(),
body = body %>% str_to_lower(),
owner_forename = owner_forename %>% str_to_lower(),
owner_surname = owner_surname %>% str_to_lower()
)]
# Join agent's first-name diminutives
chat_dt %<>% merge(
y = first_dt[, .(variants = paste(variant, collapse = "|")), by = first_name],
by.x = "owner_forename",
by.y = "first_name",
all.x = T,
all.y = F
)
# HACK: For now I'm focusing on chats with agents for whom we have diminutives
chat_dt <- chat_dt[!is.na(variants)]
# Split into visitor (v) and agent (a) datasets
v_dt <- chat_dt[from_visitor == T]
a_dt <- chat_dt[from_visitor == F]
# Remove "Visitor: " from the beginning of visitor's messages
v_dt[, body := str_remove_all(body, "^visitor: ")]
# Figure out the agent's name in the prompt ("yemisi.fadoju: " or "Abby: ")
a_dt[, agent_prompt :=
str_extract(body, "^.*?:\\s") %>% str_remove_all(":\\s$")]
# Remove the agent's prompt from her messages
a_dt[, body := str_remove(body, fixed(paste0(agent_prompt, ": ")))]
# Load the 'filters' and collapse
filters <- dir_project %>%
paste0("rct_processes/plugin/filters.txt") %>%
read.table() %$%
V1 %>%
paste(collapse = "\\s|")
# Add filters and variants
v_dt[, regex_filter := paste0(filters,"(?=", variants, ")")]
v_dt %>% head()
str_detect("hello abi", "hi\\s|hello\\s(?=abigal|abil)")
str_detect("hello abi", "hi\\s|hello\\s(?=abigal|abi)")
v_dt[str_detect(body, regex_filter)]
v_dt[str_detect(body, regex_filter)] %>% dim
v_dt %>% head
v_dt %>% dim
v_dt %>% head
v_dt[, search := str_detect(body, regex_filter), by = 1:.N]
v_dt[, search := str_detect(body, regex_filter), by = .I]
tmp
tmp <- data.table(x = c(1,1,2))
tmp
tmp[, sum(x), by = .I]
v_dt %>% dim
v_dt %>% head
v_dt[, search := str_detect(body, regex_filter), by = .(live_chat_transcript_id, message_n)]
v_dt %>% head
v_dt %>% head(1)
v_dt[, regex_filter := paste0("(", filters,")(?=", variants, ")")]
v_dt[, search := str_detect(body, regex_filter), by = .(live_chat_transcript_id, message_n)]
v_dt %>% head
str_detect("hello abi", "(hi\\s|hello\\s)(?=abigal|abi)")
v_dt[search == T]
v_dt[search == T & agent_office == "NG"]
v_dt[agent_office == "NG"] %>% dim
v_dt[agent_office == "NG", live_chat_transcript_id] %>% uniqueN()
v_dt[search == T & agent_office == "NG", live_chat_transcript_id] %>% uniqueN()
v_dt[search == T]
v_dt[agent_office != "NG", live_chat_transcript_id] %>% uniqueN()
setwd("Dropbox/Websites/tweeds_website/")
library(blogdown)
blogdown:::serve_site()
